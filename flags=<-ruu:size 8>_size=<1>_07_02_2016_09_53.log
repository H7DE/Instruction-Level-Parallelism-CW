(0, 'sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.\nCopyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.\nAll Rights Reserved. This version of SimpleScalar is licensed for academic\nnon-commercial use.  No portion of this work may be used by any commercial\nentity, or for any commercial purpose, without the prior written permission\nof SimpleScalar, LLC (info@simplescalar.com).\n\n\nProcessor Parameters:\nIssue Width: 4\nWindow Size: 8\nNumber of Virtual Registers: 32\nNumber of Physical Registers: 8\nDatapath Width: 64\nTotal Power Consumption: 72.4483\nBranch Predictor Power Consumption: 4.52313  (6.42%)\n branch target buffer power (W): 4.16837\n local predict power (W): 0.0879711\n global predict power (W): 0.0996078\n chooser power (W): 0.0702439\n RAS power (W): 0.0969383\nRename Logic Power Consumption: 0.351534  (0.499%)\n Instruction Decode Power (W): 0.0159915\n RAT decode_power (W): 0.113514\n RAT wordline_power (W): 0.0260431\n RAT bitline_power (W): 0.185078\n DCL Comparators (W): 0.0109075\nInstruction Window Power Consumption: 1.38003  (1.96%)\n tagdrive (W): 0.0465589\n tagmatch (W): 0.0135476\n Selection Logic (W): 0.00805301\n decode_power (W): 0.0239873\n wordline_power (W): 0.0844643\n bitline_power (W): 1.20342\nLoad/Store Queue Power Consumption: 0.855275  (1.21%)\n tagdrive (W): 0.457232\n tagmatch (W): 0.100774\n decode_power (W): 0.00799577\n wordline_power (W): 0.0150119\n bitline_power (W): 0.274261\nArch. Register File Power Consumption: 3.57247  (5.07%)\n decode_power (W): 0.113514\n wordline_power (W): 0.0844643\n bitline_power (W): 3.37449\nResult Bus Power Consumption: 2.05965  (2.92%)\nTotal Clock Power: 25.5702  (36.3%)\nInt ALU Power: 4.66013  (6.61%)\nFP ALU Power: 14.281  (20.3%)\nInstruction Cache Power Consumption: 2.55583  (3.63%)\n decode_power (W): 0.724888\n wordline_power (W): 0.057312\n bitline_power (W): 1.14691\n senseamp_power (W): 0.192\n tagarray_power (W): 0.434717\nItlb_power (W): 0.27086 (0.384%)\nData Cache Power Consumption: 5.21484  (7.4%)\n decode_power (W): 0.651055\n wordline_power (W): 0.196735\n bitline_power (W): 2.71235\n senseamp_power (W): 0.768\n tagarray_power (W): 0.8867\nDtlb_power (W): 0.927016 (1.32%)\nLevel 2 Cache Power Consumption: 4.22625 (6%)\n decode_power (W): 0.41817\n wordline_power (W): 0.0430878\n bitline_power (W): 3.0244\n senseamp_power (W): 0.192\n tagarray_power (W): 0.548589\nsim: command line: /homes/phjk/simplesim-wattch/sim-outorder -ruu:size 8 SSCA2v2.2/SSCA2 1 \n\nsim: simulation started @ Sun Feb  7 09:53:48 2016, options follow:\n\nsim-outorder: This simulator implements a very detailed out-of-order issue\nsuperscalar processor with a two-level memory system and speculative\nexecution support.  This simulator is a performance simulator, tracking the\nlatency of all pipeline operations.\n\n# -config                     # load configuration from a file\n# -dumpconfig                 # dump configuration to a file\n# -h                    false # print help message    \n# -v                    false # verbose operation     \n# -d                    false # enable debug message  \n# -i                    false # start in Dlite debugger\n-seed                       1 # random number generator seed (0 for timer seed)\n# -q                    false # initialize and terminate immediately\n# -chkpt               <null> # restore EIO trace execution from <fname>\n# -redir:sim           <null> # redirect simulator output to file (non-interactive only)\n# -redir:prog          <null> # redirect simulated program output to file\n-nice                       0 # simulator scheduling priority\n-max:inst                   0 # maximum number of inst\'s to execute\n-fastfwd                    0 # number of insts skipped before timing starts\n# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>\n-fetch:ifqsize              4 # instruction fetch queue size (in insts)\n-fetch:mplat                3 # extra branch mis-prediction latency\n-fetch:speed                1 # speed of front-end of machine relative to execution core\n-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}\n-bpred:bimod     2048 # bimodal predictor config (<table size>)\n-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)\n-bpred:comb      1024 # combining predictor config (<meta_table_size>)\n-bpred:ras                  8 # return address stack size (0 for no return stack)\n-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)\n# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)\n-decode:width               4 # instruction decode B/W (insts/cycle)\n-issue:width                4 # instruction issue B/W (insts/cycle)\n-issue:inorder          false # run pipeline with in-order issue\n-issue:wrongpath         true # issue instructions down wrong execution paths\n-commit:width               4 # instruction commit B/W (insts/cycle)\n-ruu:size                   8 # register update unit (RUU) size\n-lsq:size                   8 # load/store queue (LSQ) size\n-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}\n-cache:dl1lat               1 # l1 data cache hit latency (in cycles)\n-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}\n-cache:dl2lat               6 # l2 data cache hit latency (in cycles)\n-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}\n-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)\n-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}\n-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)\n-cache:flush            false # flush caches on system calls\n-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents\n-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)\n-mem:width                  8 # memory access bus width (in bytes)\n-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}\n-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}\n-tlb:lat                   30 # inst/data TLB miss latency (in cycles)\n-res:ialu                   4 # total number of integer ALU\'s available\n-res:imult                  1 # total number of integer multiplier/dividers available\n-res:memport                2 # total number of memory system ports available (to CPU)\n-res:fpalu                  4 # total number of floating point ALU\'s available\n-res:fpmult                 1 # total number of floating point multiplier/dividers available\n# -pcstat              <null> # profile stat(s) against text addr\'s (mult uses ok)\n-bugcompat              false # operate in backward-compatible bugs mode (for testing only)\n\n  Pipetrace range arguments are formatted as follows:\n\n    {{@|#}<start>}:{{@|#|+}<end>}\n\n  Both ends of the range are optional, if neither are specified, the entire\n  execution is traced.  Ranges that start with a `@\' designate an address\n  range to be traced, those that start with an `#\' designate a cycle count\n  range.  All other range values represent an instruction count range.  The\n  second argument, if specified with a `+\', indicates a value relative\n  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may\n  be used in all contexts.\n\n    Examples:   -ptrace FOO.trc #0:#1000\n                -ptrace BAR.trc @2000:\n                -ptrace BLAH.trc :1500\n                -ptrace UXXE.trc :\n                -ptrace FOOBAR.trc @main:+278\n\n  Branch predictor configuration examples for 2-level predictor:\n    Configurations:   N, M, W, X\n      N   # entries in first level (# of shift register(s))\n      W   width of shift register(s)\n      M   # entries in 2nd level (# of counters, or other FSM)\n      X   (yes-1/no-0) xor history and address for 2nd level index\n    Sample predictors:\n      GAg     : 1, W, 2^W, 0\n      GAp     : 1, W, M (M > 2^W), 0\n      PAg     : N, W, 2^W, 0\n      PAp     : N, W, M (M == 2^(N+W)), 0\n      gshare  : 1, W, 2^W, 1\n  Predictor `comb\' combines a bimodal and a 2-level predictor.\n\n  The cache config parameter <config> has the following format:\n\n    <name>:<nsets>:<bsize>:<assoc>:<repl>\n\n    <name>   - name of the cache being defined\n    <nsets>  - number of sets in the cache\n    <bsize>  - block size of the cache\n    <assoc>  - associativity of the cache\n    <repl>   - block replacement strategy, \'l\'-LRU, \'f\'-FIFO, \'r\'-random\n\n    Examples:   -cache:dl1 dl1:4096:32:1:l\n                -dtlb dtlb:128:4096:32:r\n\n  Cache levels can be unified by pointing a level of the instruction cache\n  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache\n  configuration arguments.  Most sensible combinations are supported, e.g.,\n\n    A unified l2 cache (il2 is pointed at dl2):\n      -cache:il1 il1:128:64:1:l -cache:il2 dl2\n      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l\n\n    Or, a fully unified cache hierarchy (il1 pointed at dl1):\n      -cache:il1 dl1\n      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l\n\n\n\nsim: ** starting performance simulation **\n\nHPCS SSCA Graph Analysis Benchmark v2.2\nRunning...\n\nSCALE: 1\n\nScalable Data Generator -- genScalData() beginning execution...\n\n\tgenScalData() completed execution\n\nTime taken for Scalable Data Generation is  3.781374 sec.\n\n\nKernel 1 -- computeGraph() beginning execution...\n\n\tcomputeGraph() completed execution\n\nTime taken for Kernel 1 is  0.012716 sec.\n\n\nKernel 2 -- getStartLists() beginning execution...\n\n\tgetStartLists() completed execution\n\nMax. int wt. list size is 8\n\nTime taken for Kernel 2 is  0.009337 sec.\n\n\nKernel 3 -- findSubGraphs() beginning execution...\nSearch from <0, 1>, number of vertices visited: 2\nSearch from <0, 1>, number of vertices visited: 2\nSearch from <0, 0>, number of vertices visited: 3\nSearch from <1, 1>, number of vertices visited: 2\nSearch from <1, 1>, number of vertices visited: 2\nSearch from <1, 1>, number of vertices visited: 2\nSearch from <1, 1>, number of vertices visited: 2\nSearch from <1, 1>, number of vertices visited: 2\n\nTime taken for Kernel 3 is  0.028352 sec.\n\n\nKernel 4 -- betweennessCentrality() beginning execution...\n\nTime taken for Kernel 4 is  0.004378 sec.\n\nTEPS score for Kernel 4 is 6395.497032\n\n\nsim: ** simulation statistics **\nsim_num_insn                8762705 # total number of instructions committed\nsim_num_refs                1503714 # total number of loads and stores committed\nsim_num_loads                986693 # total number of loads committed\nsim_num_stores          517021.0000 # total number of stores committed\nsim_num_branches            2076259 # total number of branches committed\nsim_elapsed_time                  8 # total simulation time in seconds\nsim_inst_rate          1095338.1250 # simulation speed (in insts/sec)\nsim_total_insn             11287157 # total number of instructions executed\nsim_total_refs              1728742 # total number of loads and stores executed\nsim_total_loads             1211463 # total number of loads executed\nsim_total_stores        517279.0000 # total number of stores executed\nsim_total_branches          2472048 # total number of branches executed\nsim_cycle                   7308808 # total simulation time in cycles\nsim_IPC                      1.1989 # instructions per cycle\nsim_CPI                      0.8341 # cycles per instruction\nsim_exec_BW                  1.5443 # total instructions (mis-spec + committed) per cycle\nsim_IPB                      4.2204 # instruction per branch\nIFQ_count                  21198348 # cumulative IFQ occupancy\nIFQ_fcount                  4634216 # cumulative IFQ full count\nifq_occupancy                2.9004 # avg IFQ occupancy (insn\'s)\nifq_rate                     1.5443 # avg IFQ dispatch rate (insn/cycle)\nifq_latency                  1.8781 # avg IFQ occupant latency (cycle\'s)\nifq_full                     0.6341 # fraction of time (cycle\'s) IFQ was full\nRUU_count                  40222985 # cumulative RUU occupancy\nRUU_fcount                  4394325 # cumulative RUU full count\nruu_occupancy                5.5034 # avg RUU occupancy (insn\'s)\nruu_rate                     1.5443 # avg RUU dispatch rate (insn/cycle)\nruu_latency                  3.5636 # avg RUU occupant latency (cycle\'s)\nruu_full                     0.6012 # fraction of time (cycle\'s) RUU was full\nLSQ_count                   6776990 # cumulative LSQ occupancy\nLSQ_fcount                    25788 # cumulative LSQ full count\nlsq_occupancy                0.9272 # avg LSQ occupancy (insn\'s)\nlsq_rate                     1.5443 # avg LSQ dispatch rate (insn/cycle)\nlsq_latency                  0.6004 # avg LSQ occupant latency (cycle\'s)\nlsq_full                     0.0035 # fraction of time (cycle\'s) LSQ was full\nsim_slip                   52226817 # total number of slip cycles\navg_sim_slip                 5.9601 # the average slip between issue and retirement\nbpred_bimod.lookups         2892834 # total number of bpred lookups\nbpred_bimod.updates         2076259 # total number of updates\nbpred_bimod.addr_hits       1600297 # total number of address-predicted hits\nbpred_bimod.dir_hits        1665278 # total number of direction-predicted hits (includes addr-hits)\nbpred_bimod.misses           410981 # total number of misses\nbpred_bimod.jr_hits          320933 # total number of address-predicted hits for JR\'s\nbpred_bimod.jr_seen          385396 # total number of JR\'s seen\nbpred_bimod.jr_non_ras_hits.PP           44 # total number of address-predicted hits for non-RAS JR\'s\nbpred_bimod.jr_non_ras_seen.PP           86 # total number of non-RAS JR\'s seen\nbpred_bimod.bpred_addr_rate    0.7708 # branch address-prediction rate (i.e., addr-hits/updates)\nbpred_bimod.bpred_dir_rate    0.8021 # branch direction-prediction rate (i.e., all-hits/updates)\nbpred_bimod.bpred_jr_rate    0.8327 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)\nbpred_bimod.bpred_jr_non_ras_rate.PP    0.5116 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)\nbpred_bimod.retstack_pushes       454914 # total number of address pushed onto ret-addr stack\nbpred_bimod.retstack_pops       561802 # total number of address popped off of ret-addr stack\nbpred_bimod.used_ras.PP       385310 # total number of RAS predictions used\nbpred_bimod.ras_hits.PP       320889 # total number of RAS hits\nbpred_bimod.ras_rate.PP    0.8328 # RAS prediction rate (i.e., RAS hits/used RAS)\nil1.accesses               12875505 # total number of accesses\nil1.hits                   12866073 # total number of hits\nil1.misses                     9432 # total number of misses\nil1.replacements               8920 # total number of replacements\nil1.writebacks                    0 # total number of writebacks\nil1.invalidations                 0 # total number of invalidations\nil1.miss_rate                0.0007 # miss rate (i.e., misses/ref)\nil1.repl_rate                0.0007 # replacement rate (i.e., repls/ref)\nil1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)\nil1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)\ndl1.accesses                1503038 # total number of accesses\ndl1.hits                    1499889 # total number of hits\ndl1.misses                     3149 # total number of misses\ndl1.replacements               2637 # total number of replacements\ndl1.writebacks                 2394 # total number of writebacks\ndl1.invalidations                 0 # total number of invalidations\ndl1.miss_rate                0.0021 # miss rate (i.e., misses/ref)\ndl1.repl_rate                0.0018 # replacement rate (i.e., repls/ref)\ndl1.wb_rate                  0.0016 # writeback rate (i.e., wrbks/ref)\ndl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)\nul2.accesses                  14975 # total number of accesses\nul2.hits                      12746 # total number of hits\nul2.misses                     2229 # total number of misses\nul2.replacements                 70 # total number of replacements\nul2.writebacks                   36 # total number of writebacks\nul2.invalidations                 0 # total number of invalidations\nul2.miss_rate                0.1488 # miss rate (i.e., misses/ref)\nul2.repl_rate                0.0047 # replacement rate (i.e., repls/ref)\nul2.wb_rate                  0.0024 # writeback rate (i.e., wrbks/ref)\nul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)\nitlb.accesses              12875505 # total number of accesses\nitlb.hits                  12875474 # total number of hits\nitlb.misses                      31 # total number of misses\nitlb.replacements                 0 # total number of replacements\nitlb.writebacks                   0 # total number of writebacks\nitlb.invalidations                0 # total number of invalidations\nitlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)\nitlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)\nitlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)\nitlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)\ndtlb.accesses               1504702 # total number of accesses\ndtlb.hits                   1504668 # total number of hits\ndtlb.misses                      34 # total number of misses\ndtlb.replacements                 0 # total number of replacements\ndtlb.writebacks                   0 # total number of writebacks\ndtlb.invalidations                0 # total number of invalidations\ndtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)\ndtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)\ndtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)\ndtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)\nrename_power           2569297.4509 # total power usage of rename unit\nbpred_power            33058662.3919 # total power usage of bpred unit\nwindow_power           10086394.2297 # total power usage of instruction window\nlsq_power              6251038.9867 # total power usage of load/store queue\nregfile_power          26110512.7059 # total power usage of arch. regfile\nicache_power           20659740.5240 # total power usage of icache\ndcache_power           44889667.7013 # total power usage of dcache\ndcache2_power          30888856.2089 # total power usage of dcache2\nalu_power              138437414.3021 # total power usage of alu\nfalu_power             104377415.5438 # total power usage of falu\nresultbus_power        15053560.0123 # total power usage of resultbus\nclock_power            186888041.7155 # total power usage of clock\navg_rename_power             0.3515 # avg power usage of rename unit\navg_bpred_power              4.5231 # avg power usage of bpred unit\navg_window_power             1.3800 # avg power usage of instruction window\navg_lsq_power                0.8553 # avg power usage of lsq\navg_regfile_power            3.5725 # avg power usage of arch. regfile\navg_icache_power             2.8267 # avg power usage of icache\navg_dcache_power             6.1419 # avg power usage of dcache\navg_dcache2_power            4.2263 # avg power usage of dcache2\navg_alu_power               18.9412 # avg power usage of alu\navg_falu_power              14.2810 # avg power usage of falu\navg_resultbus_power          2.0596 # avg power usage of resultbus\navg_clock_power             25.5702 # avg power usage of clock\nfetch_stage_power      53718402.9159 # total power usage of fetch stage\ndispatch_stage_power   2569297.4509 # total power usage of dispatch stage\nissue_stage_power      245606931.4410 # total power usage of issue stage\navg_fetch_power              7.3498 # average power of fetch unit per cycle\navg_dispatch_power           0.3515 # average power of dispatch unit per cycle\navg_issue_power             33.6042 # average power of issue unit per cycle\ntotal_power            514893186.2291 # total power per cycle\navg_total_power_cycle       70.4483 # average total power per cycle\navg_total_power_cycle_nofp_nod2      51.9410 # average total power per cycle\navg_total_power_insn        45.6176 # average total power per insn\navg_total_power_insn_nofp_nod2      33.6335 # average total power per insn\nrename_power_cc1       1665371.3808 # total power usage of rename unit_cc1\nbpred_power_cc1        8252419.2326 # total power usage of bpred unit_cc1\nwindow_power_cc1       7439193.3064 # total power usage of instruction window_cc1\nlsq_power_cc1           597948.1071 # total power usage of lsq_cc1\nregfile_power_cc1      16708424.1556 # total power usage of arch. regfile_cc1\nicache_power_cc1       15297612.6135 # total power usage of icache_cc1\ndcache_power_cc1       7388889.6854 # total power usage of dcache_cc1\ndcache2_power_cc1        53132.4260 # total power usage of dcache2_cc1\nalu_power_cc1          21513149.9564 # total power usage of alu_cc1\nresultbus_power_cc1    9853229.6072 # total power usage of resultbus_cc1\nclock_power_cc1        54835192.9004 # total power usage of clock_cc1\navg_rename_power_cc1         0.2279 # avg power usage of rename unit_cc1\navg_bpred_power_cc1          1.1291 # avg power usage of bpred unit_cc1\navg_window_power_cc1         1.0178 # avg power usage of instruction window_cc1\navg_lsq_power_cc1            0.0818 # avg power usage of lsq_cc1\navg_regfile_power_cc1        2.2861 # avg power usage of arch. regfile_cc1\navg_icache_power_cc1         2.0930 # avg power usage of icache_cc1\navg_dcache_power_cc1         1.0110 # avg power usage of dcache_cc1\navg_dcache2_power_cc1        0.0073 # avg power usage of dcache2_cc1\navg_alu_power_cc1            2.9435 # avg power usage of alu_cc1\navg_resultbus_power_cc1       1.3481 # avg power usage of resultbus_cc1\navg_clock_power_cc1          7.5026 # avg power usage of clock_cc1\nfetch_stage_power_cc1  23550031.8461 # total power usage of fetch stage_cc1\ndispatch_stage_power_cc1 1665371.3808 # total power usage of dispatch stage_cc1\nissue_stage_power_cc1  46845543.0886 # total power usage of issue stage_cc1\navg_fetch_power_cc1          3.2221 # average power of fetch unit per cycle_cc1\navg_dispatch_power_cc1       0.2279 # average power of dispatch unit per cycle_cc1\navg_issue_power_cc1          6.4095 # average power of issue unit per cycle_cc1\ntotal_power_cycle_cc1  143604563.3714 # total power per cycle_cc1\navg_total_power_cycle_cc1      19.6482 # average total power per cycle_cc1\navg_total_power_insn_cc1      12.7228 # average total power per insn_cc1\nrename_power_cc2        991873.0350 # total power usage of rename unit_cc2\nbpred_power_cc2        4695590.9440 # total power usage of bpred unit_cc2\nwindow_power_cc2       4749882.2645 # total power usage of instruction window_cc2\nlsq_power_cc2           329125.1066 # total power usage of lsq_cc2\nregfile_power_cc2      3400633.2458 # total power usage of arch. regfile_cc2\nicache_power_cc2       15297612.6135 # total power usage of icache_cc2\ndcache_power_cc2       4615723.6824 # total power usage of dcache_cc2\ndcache2_power_cc2        31644.0534 # total power usage of dcache2_cc2\nalu_power_cc2          10792501.9533 # total power usage of alu_cc2\nresultbus_power_cc2    4360466.4382 # total power usage of resultbus_cc2\nclock_power_cc2        30337809.7592 # total power usage of clock_cc2\navg_rename_power_cc2         0.1357 # avg power usage of rename unit_cc2\navg_bpred_power_cc2          0.6425 # avg power usage of bpred unit_cc2\navg_window_power_cc2         0.6499 # avg power usage of instruction window_cc2\navg_lsq_power_cc2            0.0450 # avg power usage of instruction lsq_cc2\navg_regfile_power_cc2        0.4653 # avg power usage of arch. regfile_cc2\navg_icache_power_cc2         2.0930 # avg power usage of icache_cc2\navg_dcache_power_cc2         0.6315 # avg power usage of dcache_cc2\navg_dcache2_power_cc2        0.0043 # avg power usage of dcache2_cc2\navg_alu_power_cc2            1.4766 # avg power usage of alu_cc2\navg_resultbus_power_cc2       0.5966 # avg power usage of resultbus_cc2\navg_clock_power_cc2          4.1509 # avg power usage of clock_cc2\nfetch_stage_power_cc2  19993203.5575 # total power usage of fetch stage_cc2\ndispatch_stage_power_cc2  991873.0350 # total power usage of dispatch stage_cc2\nissue_stage_power_cc2  24879343.4984 # total power usage of issue stage_cc2\navg_fetch_power_cc2          2.7355 # average power of fetch unit per cycle_cc2\navg_dispatch_power_cc2       0.1357 # average power of dispatch unit per cycle_cc2\navg_issue_power_cc2          3.4040 # average power of issue unit per cycle_cc2\ntotal_power_cycle_cc2  79602863.0959 # total power per cycle_cc2\navg_total_power_cycle_cc2      10.8914 # average total power per cycle_cc2\navg_total_power_insn_cc2       7.0525 # average total power per insn_cc2\nrename_power_cc3       1082265.6420 # total power usage of rename unit_cc3\nbpred_power_cc3        7176243.0772 # total power usage of bpred unit_cc3\nwindow_power_cc3       4961312.4838 # total power usage of instruction window_cc3\nlsq_power_cc3           890288.7595 # total power usage of lsq_cc3\nregfile_power_cc3      4206350.7421 # total power usage of arch. regfile_cc3\nicache_power_cc3       15833825.4041 # total power usage of icache_cc3\ndcache_power_cc3       8369092.9048 # total power usage of dcache_cc3\ndcache2_power_cc3      3115221.0805 # total power usage of dcache2_cc3\nalu_power_cc3          22484928.3864 # total power usage of alu_cc3\nresultbus_power_cc3    4869247.7041 # total power usage of resultbus_cc3\nclock_power_cc3        43421904.7570 # total power usage of clock_cc3\navg_rename_power_cc3         0.1481 # avg power usage of rename unit_cc3\navg_bpred_power_cc3          0.9819 # avg power usage of bpred unit_cc3\navg_window_power_cc3         0.6788 # avg power usage of instruction window_cc3\navg_lsq_power_cc3            0.1218 # avg power usage of instruction lsq_cc3\navg_regfile_power_cc3        0.5755 # avg power usage of arch. regfile_cc3\navg_icache_power_cc3         2.1664 # avg power usage of icache_cc3\navg_dcache_power_cc3         1.1451 # avg power usage of dcache_cc3\navg_dcache2_power_cc3        0.4262 # avg power usage of dcache2_cc3\navg_alu_power_cc3            3.0764 # avg power usage of alu_cc3\navg_resultbus_power_cc3       0.6662 # avg power usage of resultbus_cc3\navg_clock_power_cc3          5.9410 # avg power usage of clock_cc3\nfetch_stage_power_cc3  23010068.4813 # total power usage of fetch stage_cc3\ndispatch_stage_power_cc3 1082265.6420 # total power usage of dispatch stage_cc3\nissue_stage_power_cc3  44690091.3192 # total power usage of issue stage_cc3\navg_fetch_power_cc3          3.1483 # average power of fetch unit per cycle_cc3\navg_dispatch_power_cc3       0.1481 # average power of dispatch unit per cycle_cc3\navg_issue_power_cc3          6.1146 # average power of issue unit per cycle_cc3\ntotal_power_cycle_cc3  116410680.9416 # total power per cycle_cc3\navg_total_power_cycle_cc3      15.9275 # average total power per cycle_cc3\navg_total_power_insn_cc3      10.3136 # average total power per insn_cc3\ntotal_rename_access        11286213 # total number accesses of rename unit\ntotal_bpred_access          2076259 # total number accesses of bpred unit\ntotal_window_access        35089200 # total number accesses of instruction window\ntotal_lsq_access            1506393 # total number accesses of load/store queue\ntotal_regfile_access       12509455 # total number accesses of arch. regfile\ntotal_icache_access        12876590 # total number accesses of icache\ntotal_dcache_access         1503038 # total number accesses of dcache\ntotal_dcache2_access          14975 # total number accesses of dcache2\ntotal_alu_access            9262768 # total number accesses of alu\ntotal_resultbus_access      8559711 # total number accesses of resultbus\navg_rename_access            1.5442 # avg number accesses of rename unit\navg_bpred_access             0.2841 # avg number accesses of bpred unit\navg_window_access            4.8009 # avg number accesses of instruction window\navg_lsq_access               0.2061 # avg number accesses of lsq\navg_regfile_access           1.7116 # avg number accesses of arch. regfile\navg_icache_access            1.7618 # avg number accesses of icache\navg_dcache_access            0.2056 # avg number accesses of dcache\navg_dcache2_access           0.0020 # avg number accesses of dcache2\navg_alu_access               1.2673 # avg number accesses of alu\navg_resultbus_access         1.1712 # avg number accesses of resultbus\nmax_rename_access                 4 # max number accesses of rename unit\nmax_bpred_access                  4 # max number accesses of bpred unit\nmax_window_access                14 # max number accesses of instruction window\nmax_lsq_access                    5 # max number accesses of load/store queue\nmax_regfile_access               12 # max number accesses of arch. regfile\nmax_icache_access                 4 # max number accesses of icache\nmax_dcache_access                 4 # max number accesses of dcache\nmax_dcache2_access                4 # max number accesses of dcache2\nmax_alu_access                    4 # max number accesses of alu\nmax_resultbus_access              7 # max number accesses of resultbus\nmax_cycle_power_cc1         43.2317 # maximum cycle power usage of cc1\nmax_cycle_power_cc2         31.0756 # maximum cycle power usage of cc2\nmax_cycle_power_cc3         34.3093 # maximum cycle power usage of cc3\nsim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)\nld_text_base             0x00400000 # program text (code) segment base\nld_text_size                 199232 # program text (code) size in bytes\nld_data_base             0x10000000 # program initialized data segment base\nld_data_size                 129412 # program init\'ed `.data\' and uninit\'ed `.bss\' size in bytes\nld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)\nld_stack_size                 16384 # program initial stack size\nld_prog_entry            0x00400140 # program entry point (initial PC)\nld_environ_base          0x7fff8000 # program environment base address address\nld_target_big_endian              0 # target executable endian-ness, non-zero if big endian\nmem.page_count                   99 # total number of pages allocated\nmem.page_mem                   396k # total size of memory pages allocated\nmem.ptab_misses                 113 # total first level page table misses\nmem.ptab_accesses          65338194 # total page table accesses\nmem.ptab_miss_rate           0.0000 # first level page table miss rate\n\n\nCache Parameters:\n  Size in bytes: 16384\n  Number of sets: 512\n  Associativity: 4\n  Block Size (bytes): 8\n\nAccess Time: 9.27925e-09\nCycle Time:  1.09081e-08\n\nBest Ndwl (L1): 8\nBest Ndbl (L1): 1\nBest Nspd (L1): 1\nBest Ntwl (L1): 1\nBest Ntbl (L1): 4\nBest Ntspd (L1): 1\n\nTime Components:\n data side (with Output driver) (ns): 8.44162\n tag side (ns): 8.55667\n decode_data (ns): 5.29318\n wordline_data (ns): 1.03507\n bitline_data (ns): 0.810785\n sense_amp_data (ns): 0.58\n decode_tag (ns): 2.37065\n wordline_tag (ns): 1.36749\n bitline_tag (ns): 0.158246\n sense_amp_tag (ns): 0.26\n compare (ns): 2.42991\n mux driver (ns): 1.6125\n sel inverter (ns): 0.357877\n data output driver (ns): 0.722579\n total data path (with output driver) (ns): 7.71904\n total tag path is set assoc (ns): 8.55667\n precharge time (ns): 1.6289\n\nCache Parameters:\n  Size in bytes: 16384\n  Number of sets: 512\n  Associativity: 1\n  Block Size (bytes): 32\n\nAccess Time: 6.15176e-09\nCycle Time:  8.05494e-09\n\nBest Ndwl (L1): 2\nBest Ndbl (L1): 4\nBest Nspd (L1): 1\nBest Ntwl (L1): 1\nBest Ntbl (L1): 2\nBest Ntspd (L1): 2\n\nTime Components:\n data side (with Output driver) (ns): 6.14931\n tag side (ns): 6.15176\n decode_data (ns): 3.35254\n wordline_data (ns): 1.30935\n bitline_data (ns): 0.184839\n sense_amp_data (ns): 0.58\n decode_tag (ns): 1.84499\n wordline_tag (ns): 0.847457\n bitline_tag (ns): 0.250732\n sense_amp_tag (ns): 0.26\n compare (ns): 2.36506\n valid signal driver (ns): 0.583518\n data output driver (ns): 0.722579\n total data path (with output driver) (ns): 5.42673\n total tag path is dm (ns): 6.15176\n precharge time (ns): 1.90318\n\nCache Parameters:\n  Size in bytes: 16384\n  Number of sets: 128\n  Associativity: 4\n  Block Size (bytes): 32\n\nAccess Time: 9.14093e-09\nCycle Time:  1.11718e-08\n\nBest Ndwl (L1): 4\nBest Ndbl (L1): 2\nBest Nspd (L1): 1\nBest Ntwl (L1): 1\nBest Ntbl (L1): 2\nBest Ntspd (L1): 1\n\nTime Components:\n data side (with Output driver) (ns): 6.05114\n tag side (ns): 7.98848\n decode_data (ns): 2.92572\n wordline_data (ns): 1.437\n bitline_data (ns): -0.0440331\n sense_amp_data (ns): 0.58\n decode_tag (ns): 1.46851\n wordline_tag (ns): 1.27791\n bitline_tag (ns): -0.0315811\n sense_amp_tag (ns): 0.26\n compare (ns): 2.29478\n mux driver (ns): 2.37376\n sel inverter (ns): 0.345094\n data output driver (ns): 1.15245\n total data path (with output driver) (ns): 4.89869\n total tag path is set assoc (ns): 7.98848\n precharge time (ns): 2.03083\n\nCache Parameters:\n  Size in bytes: 262144\n  Number of sets: 1024\n  Associativity: 4\n  Block Size (bytes): 64\n\nAccess Time: 1.44948e-08\nCycle Time:  1.76863e-08\n\nBest Ndwl (L1): 2\nBest Ndbl (L1): 2\nBest Nspd (L1): 1\nBest Ntwl (L1): 1\nBest Ntbl (L1): 4\nBest Ntspd (L1): 1\n\nTime Components:\n data side (with Output driver) (ns): 11.3269\n tag side (ns): 12.2049\n decode_data (ns): 4.99158\n wordline_data (ns): 2.59771\n bitline_data (ns): 0.867749\n sense_amp_data (ns): 0.58\n decode_tag (ns): 4.52586\n wordline_tag (ns): 1.24192\n bitline_tag (ns): 0.46158\n sense_amp_tag (ns): 0.26\n compare (ns): 2.17054\n mux driver (ns): 3.21212\n sel inverter (ns): 0.332908\n data output driver (ns): 2.28987\n total data path (with output driver) (ns): 9.03704\n total tag path is set assoc (ns): 12.2049\n precharge time (ns): 3.19154')